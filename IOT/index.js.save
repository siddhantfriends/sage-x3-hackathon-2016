var i2c_htu21d = require('htu21d-i2c');
var deviceModule = require("aws-iot-device-sdk").device;
var path = require("path");
var fs = require("fs");

// If using a Raspberry Pi, do not specify the i2c device name.
// The correct name will be used based on the board revision.
// Older boards use /dev/i2c-0, newer ones use /dev/i2c-1.
// If using any other board, specify the device name.
// For example: i2c_htu21d({device: '/dev/i2c-1/'});
var htu21df = new i2c_htu21d();

var pkpath =  path.join(__dirname, "certs", "4d7ff92cfa-private.pem.key");
console.log(pkpath);
const device = deviceModule({
	keyPath: pkpath,
	certPath: path.join(__dirname, "certs", "4d7ff92cfa-certificate.pem.key"),
	caPath: path.join(__dirname, "certs", "root-CA.crt"),
	clientId: "rpi",
	region: "us-west-2",
//	baseReconnectTimeMs: args.baseReconnectTimeMs,
//	keepalive: args.keepAlive,
//	protocol: args.Protocol,
//	port: args.Port,
//	host: args.Host,
//	debug: args.Debug
});
   device
      .on('connect', function() {
         console.log('connect');
      });
   device
      .on('close', function() {
         console.log('close');
      });
   device
      .on('reconnect', function() {
         console.log('reconnect');
      });
   device
      .on('offline', function() {
         console.log('offline');
      });
   device
      .on('error', function(error) {
         console.log('error', error);
      });
   device
      .on('message', function(topic, payload) {
         console.log('message', topic, payload.toString());
      });

setInterval(function() {
	var res = {};
	htu21df.readTemperature(function (temp) {
		console.log('Temperature, C:', temp);
		res.temperature = temp;
	
	    	htu21df.readHumidity(function (humidity) {
	        	console.log('Humidity, RH %:', humidity);
			res.humidity = humidity;
			//
			device.publish("$aws/things/DemoThing/shadow/update", JSON.stringify(res));
	    	});
	})
}, 60000);
